
package connectN.ctN;

import connectN.players.*;

import java.awt.*;
import java.awt.geom.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.border.*;
import java.io.*;
import java.lang.*;


/**
 *  GUI for setting the size of the board and the length of winning connection.
 */
public class setUp extends JFrame
{
     
	// GUI elements that get updated.
	private JLabel numRowsLabel, numColsLabel, numConnectedLabel, label;
	private JButton numRowsButton, numColsButton, numConnectedButton, startButton;
	private Box mainPanel;

	private int rows, cols, connected;
	// GUI callbacks.

	// Pointer to the Window that this GUI controls.
	private final ConnectNGame settingBoard;

	public setUp (String title, ConnectNGame setting, int rows, int cols, int connected) 
	{
		this.rows = rows;
		this.cols = cols;
		this.connected = connected;
		settingBoard = setting;

		setTitle(title);

		// Allocate all the setting GUI elements we need to keep track of.
		numRowsLabel = new JLabel();
		numColsLabel  = new JLabel();
		numConnectedLabel  = new JLabel();
		label = new JLabel(" Change Board Size or Winning Connection Length ");

		numRowsButton = new JButton ("Change");
		numColsButton = new JButton ("Change");
		numConnectedButton = new JButton ("Change");
		startButton = new JButton("Start Game");

		Box numRowsPanel = Box.createHorizontalBox();
		numRowsPanel.add(numRowsButton);
		numRowsPanel.add(hstrut(10));
		numRowsPanel.add(new JLabel("Number of rows (3 < rows < 10): "));
		numRowsLabel.setText(" " + String.valueOf(rows));
		numRowsPanel.add(numRowsLabel);
		numRowsPanel.add(Box.createHorizontalGlue());

		Box numColsPanel = Box.createHorizontalBox();
		numColsPanel.add(numColsButton);
		numColsPanel.add(hstrut(10));
		numColsPanel.add(new JLabel("Number of cols (3 < cols < 10): "));
		numColsLabel.setText(" " + String.valueOf(cols));
		numColsPanel.add(numColsLabel);
		numColsPanel.add(Box.createHorizontalGlue());

		Box numConnectedPanel = Box.createHorizontalBox();
		numConnectedPanel.add(numConnectedButton);
		numConnectedPanel.add(hstrut(10));
		numConnectedPanel.add(new JLabel("Length of winning connection (1 < discs <7): "));
		numConnectedLabel.setText(" " + String.valueOf(connected));
		numConnectedPanel.add(numConnectedLabel);
		numConnectedPanel.add(Box.createHorizontalGlue());

		Box labelPanel = Box.createHorizontalBox();
		labelPanel.add(label);

		Box upPanel = Box.createHorizontalBox();
 		upPanel.add(hstrut(20));
		upPanel.add(Box.createHorizontalGlue());
 		upPanel.add(numRowsPanel);
		upPanel.add(Box.createHorizontalGlue());
		upPanel.add(hstrut(20));

		Box midPanel = Box.createHorizontalBox();
		midPanel.add(hstrut(20));
		midPanel.add(Box.createHorizontalGlue());
		midPanel.add(numColsPanel);
		midPanel.add(Box.createHorizontalGlue());
		midPanel.add(hstrut(20));

		Box bottomPanel = Box.createHorizontalBox();
		bottomPanel.add(hstrut(20));
		bottomPanel.add(Box.createHorizontalGlue());
		bottomPanel.add(numConnectedPanel);
		bottomPanel.add(Box.createHorizontalGlue());
		bottomPanel.add(hstrut(20));

		Box startPanel = Box.createHorizontalBox();
		startPanel.add(hstrut(20));
		startPanel.add(Box.createHorizontalGlue());
		startPanel.add(startButton);
		startPanel.add(Box.createHorizontalGlue());
		startPanel.add(hstrut(20));

		mainPanel = Box.createVerticalBox();

		mainPanel.add(vstrut(10));
		mainPanel.add(labelPanel);
		mainPanel.add(vstrut(10));
		mainPanel.add(upPanel);
		mainPanel.add(vstrut(10));
		mainPanel.add(midPanel);
		mainPanel.add(vstrut(10));
		mainPanel.add(bottomPanel);
		mainPanel.add(vstrut(10));
		mainPanel.add(startPanel);
		mainPanel.add(vstrut(10));
		mainPanel.add(Box.createVerticalGlue());

		getContentPane().setLayout(
			new BoxLayout(getContentPane(),BoxLayout.Y_AXIS));
		getContentPane().add(mainPanel);

		pack();
		{ 
			Dimension dim = mainPanel.getPreferredSize();
			dim.width = 550;
 			setSize(dim);
		}
		pack();

		// ***** END LAYOUT *****

		// Register callbacks for the buttons.
 
		numRowsButton.addActionListener(
			new ActionListener () 
		{
			public void actionPerformed (ActionEvent e) 
			{ 
				changenumRows(); 
			}
		});

		numColsButton.addActionListener(
			new ActionListener () 
		{
			public void actionPerformed (ActionEvent e) 
			{ 
				changenumCols(); 
			}
		});

		numConnectedButton.addActionListener(
			new ActionListener () 
		{
			public void actionPerformed (ActionEvent e) 
			{ 
				changenumConnected(); 
			}
		});

		startButton.addActionListener(
			new ActionListener () 
		{
			public void actionPerformed (ActionEvent e) 
			{ 
				settingBoard.startGame();
			}
		});

	}

	//Routines to update the GUI settings

	public void updateRows (int rows) 
	{
		numRowsLabel.setText(" "+rows);
		numRowsLabel.repaint();
	}

	public void updateCols (int cols) 
	{
		numColsLabel.setText(" "+cols);
		numColsLabel.repaint();
	}

	public void updateConnected(int pieceNum) 
	{
		numConnectedLabel.setText(" "+ pieceNum);
		numConnectedLabel.repaint();
	}

	//GUI call back
	public void changenumRows() 
	{
		while (true) 
		{
			String s = JOptionPane.showInputDialog(
				this,"Enter number of rows:");
			if (s == null) return;
			try 
			{ 
				settingBoard.changeRows(Integer.parseInt(s));
 				break;
			} 
			catch (NumberFormatException e) 
			{
				// Ask again.
			}
		}
	}
    
	public void changenumCols() 
	{
		while (true) 
		{
			String s = JOptionPane.showInputDialog(
				this,"Enter number of columns:");
			if (s == null) return;
			try 
			{
				settingBoard.changeCols(Integer.parseInt(s));
				break;
			} 
			catch (NumberFormatException e) 
			{
				// Ask again.
			}
		}
	}

	public void changenumConnected() 
	{
		while (true) 
		{
			String s = JOptionPane.showInputDialog(
				this,"Enter number of consecutive pieces to count:");
			if (s == null) return;
			try 
			{
				settingBoard.changePiecesNum(Integer.parseInt(s));
				break;
			} 
			catch (NumberFormatException e) 
			{
				// Ask again.
			}
		}
	}



	// Don't use Box.createHorizontalStrut() for this, since horizontal
	// struts seem to produce vertical glue that fills extra vertical space.
	private Component hstrut (int width) 
	{
		return Box.createRigidArea(new Dimension(width,0));
	}
	// We appear to be able to use either Box.createRigidArea() or
	// Box.createVerticalStrut() to produce vertical struts.
	private Component vstrut (int height) 
	{
		return Box.createRigidArea(new Dimension(0,height));
		//return Box.createVerticalStrut(height);
	}

}