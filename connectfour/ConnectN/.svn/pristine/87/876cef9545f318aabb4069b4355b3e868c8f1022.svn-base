package is207.connectn.gui;

import is207.connectn.game.Game;
import is207.connectn.game.GameManager;
import is207.connectn.game.GameManager.GameChange;
import is207.connectn.game.GameManager.GameListener;
import is207.connectn.game.GameParams;
import is207.connectn.game.Player;
import is207.connectn.game.strategy.Strategy;
import is207.connectn.game.strategy.StrategyManager;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.event.ActionEvent;
import javax.swing.AbstractAction;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;



/**
 *
 * @author evenal
 */
public class ConnectNPanel extends JPanel implements GameListener
{

    JTextField status;
    JTextField colField, rowField, timeoutField, connLenField;
    JLabel gameInfo;

    GameParams gameParams = new GameParams();
    Game game;
    Board board;
    Player winner = null;

    int delay = 1000; //millisec
    StrategyManager stratMgr;
    GameManager gameMgr;

    public ConnectNPanel() {
        setLayout(new BorderLayout());
        Box menu = Box.createVerticalBox();
        menu.add(new JButton(new PlayGameAction()));
        menu.add(new JButton(new PlayTournamentAction()));
        add(menu, BorderLayout.EAST);
        gameInfo = new JLabel(" ");
        add(gameInfo, BorderLayout.NORTH);
        status = new JTextField();
        add(status, BorderLayout.SOUTH);
        board = new Board(gameParams);
        add(board);

        stratMgr = StrategyManager.getInstance();
        gameMgr = new GameManager(gameParams);
        gameMgr.addMoveListener(board);
        gameMgr.addGameOverListener(board);
        gameMgr.addGameOverListener(this);
        gameMgr.addNewGameListener(this);
    }

    private void playGame() {
        try {
            Player player1 = setupPlayer(1, Color.RED);
            Player player2 = setupPlayer(2, Color.BLUE);
            gameMgr.startSingleGame(new Game(gameParams, player1, player2));
            gameInfo.setText(player1.getName() + " (RED) vs " + player2.getName() + " (BLUE)");
        }
        catch (Exception ie) {
        }
    }

    @Override
    public void gameChanged(Game game, GameChange reason) {
        if (reason == GameChange.NEW_GAME) {
            Player[] players = game.getPlayers();
            gameInfo.setText(players[0].getName()
                    + " (RED) vs " + players[1].getName() + " (BLUE)");
            board.reset();
        }
        else if (reason == GameChange.GAME_OVER) {
            Player winner = game.getWinner();
            if (null == winner) status.setText("Draw");
            else status.setText(winner.getName() + " won");
        }
    }

    private Player setupPlayer(int playerNo, Color colour)
            throws InstantiationException, IllegalAccessException {
        SimpleForm form = new SimpleForm();
        JTextField name = new JTextField("Player" + playerNo);

        StrategyManager stratMgr = StrategyManager.getInstance();
        String[] strategies = stratMgr.getNames();
        JComboBox<String> strategyName = new JComboBox<>(strategies);
        strategyName.setSelectedItem("Random");

        form.addFormField("Name", name);
        form.addComboBox("Strategy", strategyName);

        JOptionPane.showConfirmDialog(null, form);

        String stratname = strategies[strategyName.getSelectedIndex()];
        Strategy strat = stratMgr.getStrategyInstance(stratname);
        strat.setup(gameParams);
        Player p = new Player(name.getText() + "/" + stratname, colour, strat);
        return p;
    }

    private Player setupPlayer(String name, Color colour)
            throws InstantiationException, IllegalAccessException {
        Strategy strat = stratMgr.getStrategyInstance(name);
        strat.setup(gameParams);
        Player p = new Player(name, colour, strat);
        return p;
    }



    private class PlayTournamentAction extends AbstractAction
    {
        public PlayTournamentAction() {
            super("Tournament");
        }

        public void actionPerformed(ActionEvent e) {
            gameMgr.startTournament();
        }
    }



    private class PlayGameAction extends AbstractAction
    {
        public PlayGameAction() {
            super("Single game...");
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            playGame();
        }
    }
}
