package is207.connectn.strategy;

import is207.connectn.handin.glenn.GGBalancedDefensiveStrategy;
import is207.connectn.handin.glenn.GGThreadedLearningDefensiveStrategy;
import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLClassLoader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Set;
import java.util.jar.Attributes;
import java.util.jar.JarFile;
import java.util.jar.Manifest;

/**
 *
 * @author evenal
 */
public class StrategyManager
{
    private static final String STRATEGY_DIR = "strategies";
    private static StrategyManager instance;

    private HashMap<String, Class<? extends Strategy>> strategies;

    public static StrategyManager getInstance() {
        if (null == instance)
            instance = new StrategyManager();
        return instance;
    }

    private StrategyManager() {
        strategies = new HashMap<>();

        register("Random", RandomStrategy.class);
        register("Blocking", BlockingStrategy.class);
        register("NegaMax2", NegaMax2.class);
        register("NegaScout2", NegaScout2.class);

        register("GlennDefensive", GGBalancedDefensiveStrategy.class);
        register("GlennLearningDefensive", GGThreadedLearningDefensiveStrategy.class);
        //        register("LoserButWho", LoserButWho.class);
        autoLoadStrategies();

    }

    private void autoLoadStrategies() {
        URL[] jarUrls = getJarUrls(STRATEGY_DIR);
        if (null == jarUrls) return;
        URLClassLoader classLoader = new URLClassLoader(jarUrls);
        for (URL url : jarUrls)
            loadStrategy(classLoader, url);
    }

    public void loadStrategy(ClassLoader loader, URL url) {
        try {
            JarFile jf = new JarFile(url.getFile());
            Manifest manifest = jf.getManifest();
            Attributes attr = manifest.getMainAttributes();
            String stratName = attr.getValue("Strategy-Name");
            String className = attr.getValue("Strategy-Class");
            Class cls = Class.forName(className, true, loader);
            register(className, cls);
        }
        catch (IOException ioe) {
            ioe.printStackTrace();
        }
        catch (ClassNotFoundException cnfe) {
            cnfe.printStackTrace();
        }
    }

    private URL[] getJarUrls(String dirName) {
        File dir = new File(STRATEGY_DIR);
        File[] jarFiles = dir.listFiles(new FileFilter()
        {
            @Override
            public boolean accept(File pathname) {
                return pathname.getPath().endsWith(".jar");
            }
        });
        if (null == jarFiles) return null;
        ArrayList<URL> urls = new ArrayList<>();
        for (File f : jarFiles)
            try {
                URL url = f.toURI().toURL();
                System.out.println(url);
                urls.add(url);
            }
            catch (MalformedURLException e) {
                // ignore
            }
        return urls.toArray((URL[]) null);
    }

    public void register(String name, Class<? extends Strategy> strategy) {
        strategies.put(name, strategy);
    }

    public Class<? extends Strategy> getStrategy(String name) {
        return strategies.get(name);
    }

    public Strategy getStrategyInstance(String name)
            throws InstantiationException, IllegalAccessException {
        Class<? extends Strategy> strategy = getStrategy(name);
        Strategy instance = strategy.newInstance();
        instance.name = name;
        return instance;
    }

    public String[] getNames() {
        Set<String> keys = strategies.keySet();
        return keys.toArray(new String[0]);
    }
}
