package is207.connectn.strategy;



/**
 *
 * @author evenal
 */
public class BlockingStrategy extends Strategy
{

    public static final int ME = 1;
    public static final int OPPONENT = -1;
    Board board;

    public void setup() {
        super.setup();
        board = new Board(rows, cols);
        lastMove = selectedMove = -1;
    }

    @Override
    public Integer call() {
        if (selectedMove >= 0) {
            board.doMove(selectedMove, ME);
        }
        if (lastMove >= 0) {
            board.doMove(lastMove, OPPONENT);
        }

        int bestMove = 0;
        int bestScore = Integer.MIN_VALUE;
        for (int c : validMoves) {
            int score = eval(c);
            if (score > bestScore) {
                bestScore = score;
                bestMove = c;
            }
        }
        selectedMove = bestMove;
        return selectedMove;
    }

    private int eval(int c) {
        int r = board.h[c];
        return eval(r, c);
    }

    private int eval(int r, int c) {
        int sum = 0;
        sum += eval(r, c, 1, 0);
        sum += eval(r, c, 1, 1);
        sum += eval(r, c, 0, 1);
        sum += eval(r, c, -1, 1);
        sum += eval(r, c, -1, 0);
        sum += eval(r, c, -1, -1);
        sum += eval(r, c, 0, -1);
        sum += eval(r, c, 1, -1);
        return sum;
    }

    private int eval(int r, int c, int dr, int dc) {
        int seq = 0;
        int opps = 0;
        int free = 0;
        boolean mixed = false;

        for (int i = 1; i <= nConn; i++) {
            int ir = r + dr * i;
            int ic = c + dc * i;
            if (ir >= 0 && ir < rows && ic >= 0 && ic < cols) {
                int v = board.state[ir][ic];
                if (v == ME) {
                    mixed = true;
                }
                else if (v == OPPONENT) {
                    if (!mixed) {
                        seq++;
                    }
                    opps++;
                }
                else {
                    free++;
                }
            }
        }
        return 10 * seq + opps + free / 2;
    }



    private class Board
    {

        int state[][];
        int h[];

        public Board(int rows, int cols) {
            state = new int[rows][cols];
            h = new int[cols];
        }

        public void doMove(int c, int p) {
            assert p == 1 || p == -1;
            int r = h[c];
            state[r][c] = p;
            h[c]++;
        }
    }
}
