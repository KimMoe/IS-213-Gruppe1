 
package connectN.players;
import connectN.ctN.*;

// A Connect-N player that makes valid moves beside the opponent's last move.

public class SimplePlayer extends Player
{

	private int id;
	private int msecPerMove;
	private boolean initialized;
	java.util.Random rand = new java.util.Random();
	int col = 0;

    public SimplePlayer() 
	{
		initialized = false;
    }

    public String name() {
        return "Simple player";
    }

 	public void init (int id, int msecPerMove, int rows, int cols) 
	{
		this.id = id;
		this.msecPerMove = msecPerMove;
		initialized = true;
	}

    public void calcMove (ConnectNBoard board, int oppMoveCol) {
		// Make sure we were initialized properly
		if (!initialized) 
		{
			throw new Error ("Complaint: I wasn't initialized!"); 
		}

        // Make sure there is room to make a move.
        if (board.isFull()) 
		{
            throw new Error ("Complaint: The board is full!");
        }

		int moveRight=-1, moveLeft=-1;
		//make a move beside the last move of the opponent
		while(true)//repeat until the time is up
		{
			if(board.isValidMove(oppMoveCol+1)) //to the right
			{
				board.move(oppMoveCol+1, id);
				moveRight = boardEvaluation(board);
				board.unmove(oppMoveCol+1, id);
			}
			if(board.isValidMove(oppMoveCol-1))  
			{//to the left
				board.move(oppMoveCol-1, id);
				moveLeft = boardEvaluation(board);
				board.unmove(oppMoveCol-1, id);
			}

			if(moveRight > -1 || moveLeft > -1)
			{
				checkTime();
				if(moveRight > moveLeft) //Randomly determine which move to take
					setMove(oppMoveCol+1);
				else
					setMove(oppMoveCol-1);
			}
			else  
			{//make a random move
				do 
				{
					checkTime();
					col = rand.nextInt(board.numCols());
				} while (!board.isValidMove(col));
				setMove(col);
			}
		}
	}

	/** This method returns a random positive integer number. 
	 *  This is just an illustration of the boardEvaluation function. 
	 */
	private int boardEvaluation(ConnectNBoard board) 
	{
		do
		{ 
			col = rand.nextInt(board.numCols());
		} while (col < 0);
		return col;

	}
}
