package is207.connectn.game;

import is207.connectn.ConnectN;
import is207.connectn.game.Tournament.Match;
import is207.connectn.strategy.Strategy;
import is207.connectn.strategy.StrategyManager;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import javax.swing.Timer;

/**
 *
 * @author evenal
 */
public class GameManager implements ActionListener
{

    ArrayList<GameListener> moveListeners;
    ArrayList<GameListener> newGameListeners;
    ArrayList<GameListener> gameOverListeners;
    Timer timer;
    int delay;
    Tournament theTournament;
    Match currentMatch;
    Game theGame;
    GameParams params;

    public GameManager(GameParams params) {
        this.params = params;
        moveListeners = new ArrayList<>();
        newGameListeners = new ArrayList<>();
        gameOverListeners = new ArrayList<>();
        delay = params.getTimeLimit();
        timer = new Timer(delay, this);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (null == theTournament) {
            // single game
            if (null != theGame) {
                if (theGame.gameOver) {
                    endGame();
                }
                else {
                    makeMove();
                }
            }
        }
        else {
            // tournament running
            if (null == theGame) {
                ConnectN.log("shouldn't happen");
            }
            else if (theGame.gameOver) {
                endGame();
                if (theTournament.hasMoreMatches()) {
                    startNextGame();
                }
                else {
                    endTournament();
                }
            }
            else {
                makeMove();
            }
        }
    }

    public void startSingleGame(Game game) {
        ConnectN.log("starting single game...");
        theGame = game;
        theTournament = null;
        fireNewGame(game);
        timer.start();
    }

    public void startGame(String stratName1, String stratName2) {
        ConnectN.log("Starting match between " + stratName1 + " and "
                + stratName2);
        Player p1 = setupPlayer(stratName1, Color.RED);
        Player p2 = setupPlayer(stratName2, Color.BLUE);
        theGame = new Game(params, p1, p2);
        fireNewGame(theGame);
        timer.start();
    }

    private Player setupPlayer(String stratName, Color color) {
        try {
            StrategyManager stratMgr = StrategyManager.getInstance();
            Strategy strategy = stratMgr.getStrategyInstance(stratName);
            strategy.setup(params);
            Player player = new Player(stratName, color, strategy);
            return player;
        }
        catch (ReflectiveOperationException roe) {
            roe.printStackTrace();
        }
        return null;
    }

    public void startTournament() {
        ConnectN.log("starting tournament");
        theTournament = new Tournament(params);
        currentMatch = theTournament.start();
        startGame(currentMatch.n1, currentMatch.n2);
    }

    public Tournament getTournament() {
        return theTournament;
    }

    private void startNextGame() {
        ConnectN.log("starting next game!");
        currentMatch = theTournament.nextMatch();
        startGame(currentMatch.n1, currentMatch.n2);
    }

    private void makeMove() {
        timer.stop();
        try {
            theGame.makeMove();
            fireMoved(theGame);
        }
        catch (GameException ge) {
            ge.printStackTrace();
        }
        timer.start();
    }

    private void endGame() {
        timer.stop();
        if (theTournament != null)
            theTournament.setResult(currentMatch, theGame);
        fireGameOver();
        theGame = null;
    }

    public void endTournament() {

    }

    // Listeners
    public void addNewGameListener(GameListener l) {
        newGameListeners.add(l);
    }

    public void fireNewGame(Game game) {
        for (GameListener l : newGameListeners) {
            l.gameChanged(game, GameChange.NEW_GAME);
        }
    }

    public void addMoveListener(GameListener l) {
        moveListeners.add(l);
    }

    public void fireMoved(Game game) {
        for (GameListener l : moveListeners) {
            l.gameChanged(game, GameChange.MOVE);
        }
    }

    public void addGameOverListener(GameListener l) {
        gameOverListeners.add(l);
    }

    public void fireGameOver() {
        ConnectN.log("fireGameOver");
        for (GameListener l : gameOverListeners) {
            l.gameChanged(theGame, GameChange.GAME_OVER);
        }
    }

    public static enum GameChange
    {

        NEW_GAME, MOVE, GAME_OVER;
    }

    public interface GameListener
    {

        public void gameChanged(Game game, GameChange reason);
    }
}
