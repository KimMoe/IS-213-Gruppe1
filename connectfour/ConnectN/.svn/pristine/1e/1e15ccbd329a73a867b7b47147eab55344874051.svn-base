package is207.connectn.gui;

import is207.connectn.game.Game;
import is207.connectn.game.GameManager;
import is207.connectn.game.GameManager.GameChange;
import is207.connectn.game.GameManager.GameListener;
import is207.connectn.game.GameParams;
import is207.connectn.game.Player;
import is207.connectn.game.Tournament;
import is207.connectn.strategy.StrategyManager;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import javax.swing.AbstractAction;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;



/**
 * This is the main window of the GUI. It contains the board,
 * the names of the players and buttons to start new
 * single games or tournaments
 *
 * @author evenal
 */
public final class ConnectNPanel extends JPanel implements GameListener
{

    JTextField status;
    JTextField colField, rowField, timeoutField, connLenField;
    JLabel p1, p2;

    GameParams gameParams = GameParams.getInstance();
    Game game;
    Board board;
    Player winner = null;

    int delay = 1000; //millisec
    StrategyManager stratMgr;
    GameManager gameMgr;
    TournamentResult tournamentResult;

    public ConnectNPanel() {
        setLayout(new BorderLayout());
        Box menu = Box.createVerticalBox();
        menu.add(new JButton(new PlayGameAction()));
        menu.add(new JButton(new PlayTournamentAction()));
        menu.add(new JLabel(" "));
        JLabel redLabel = new JLabel("The Red Player is:");
        menu.add(redLabel);
        p1 = new JLabel(" ");
        menu.add(p1);
        JLabel blueLabel = new JLabel("TheBlue Player is:");
        menu.add(blueLabel);
        p2 = new JLabel("");
        menu.add(p2);
        add(menu, BorderLayout.EAST);

        status = new JTextField();
        add(status, BorderLayout.SOUTH);
        board = new Board(gameParams);
        add(board);

        stratMgr = StrategyManager.getInstance();
        gameMgr = new GameManager();
        gameMgr.addMoveListener(board);
        gameMgr.addGameOverListener(board);
        gameMgr.addGameOverListener(this);
        gameMgr.addNewGameListener(this);
    }

    @Override
    public void gameChanged(Game game, GameChange reason) {
        if (reason == GameChange.NEW_GAME) {
            Player[] players = game.getPlayers();
            p1.setText(players[0].getName());
            p2.setText(players[1].getName());
            board.reset();
        }
        else if (reason == GameChange.GAME_OVER) {
            Player winner = game.getWinner();
            if (null == winner) {
                status.setText("Draw");
            }
            else {
                status.setText(winner.getName() + " won");
            }
        }
    }



    private class PlayTournamentAction extends AbstractAction
    {

        public PlayTournamentAction() {
            super("Tournament");
        }

        public void actionPerformed(ActionEvent e) {
            gameMgr.startTournament();
            displayTournamentResults(gameMgr.getTournament());
        }
    }

    private void displayTournamentResults(Tournament t) {
        if (null == tournamentResult) {
            tournamentResult = new TournamentResult(t);
        }
    }



    private class PlayGameAction extends AbstractAction
    {

        public PlayGameAction() {
            super("Single game...");
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            String[] stratName = selectStrategyNames();
            gameMgr.startGame(stratName[0], stratName[1]);
        }
    }

    private String[] selectStrategyNames() {
        SimpleForm form = new SimpleForm();
        StrategyManager stratMgr = StrategyManager.getInstance();
        String[] strategies = stratMgr.getNames();
        JComboBox<String> stratSelector1 = new JComboBox<>(strategies);
        JComboBox<String> stratSelector2 = new JComboBox<>(strategies);
        form.addComboBox("First player strategy:", stratSelector1);
        form.addComboBox("Second player strategy:", stratSelector2);
        JOptionPane.showConfirmDialog(this,
                                      form, "Select player strategies:",
                                      JOptionPane.OK_CANCEL_OPTION);
        String[] strategyNames = new String[]{
            strategies[stratSelector1.getSelectedIndex()],
            strategies[stratSelector2.getSelectedIndex()]
        };

        return strategyNames;
    }
}
