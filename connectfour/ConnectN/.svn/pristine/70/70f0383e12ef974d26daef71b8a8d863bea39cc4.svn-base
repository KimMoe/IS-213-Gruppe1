package is207.connectn.game;

import java.util.LinkedList;



/**
 * Represents a single game between two players. The primary
 * responsibility of this class is to let the players make a move in
 * turn, make sure they do not exceed the timelimit for deciding the
 * move, and to determine the winner.
 *
 * @author evenal
 */
public class Game {

    private GameParams gameParams;
    private GameState board;
    private Player winner;

    int numMoves;
    int lastMove;
    LinkedList<Player> queue;


    /**
     * Create a game
     *
     * @param timeLimit The amount of time a player is allowed to
     *                  "think" before making a move
     * @param rows      size of board
     * @param cols
     * @param conn_len  number of pieces needed in line to win
     * @param player1   first player, starts the game
     * @param player2   second player
     */
    public Game(GameParams gameParams, Player player1, Player player2) {

        //       board = new GameState(rows, cols);
        queue = new LinkedList<>();
        queue.addLast(player1);
        queue.addLast(player2);
        numMoves = 0;
        lastMove = -1;
        winner = null;
    }


    public void addGameStateListener(GameStateListener l) {
        board.addGameStateListener(l);
    }


    /**
     * Let the first player in the queue make a move
     *
     * @return true if the player has won
     */
    public boolean makeMove() throws GameException {
        Player p = queue.removeFirst();
        try {
            lastMove = p.selectMove(lastMove);
            board.add(lastMove, p);
        }
        catch (Exception e) {
            throw new GameException(null, e, p);
        }
        return true;
    }
}
