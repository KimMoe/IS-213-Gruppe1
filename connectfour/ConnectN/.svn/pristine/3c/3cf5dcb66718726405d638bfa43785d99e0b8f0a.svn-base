package is207.connectn.game;

import java.util.ArrayList;



/**
 *
 * @author evenal
 */
public class GameState {

    private int cols;
    private int rows;
    Column[] board;
    ArrayList<GameStateListener> listeners;


    public GameState(int cols, int rows) {
        board = new Column[cols];
        for (int c = 0; c<cols; c++)
            board[c] = new Column();
        listeners = new ArrayList<>();
    }


    public void addGameStateListener(GameStateListener l) {
        listeners.add(l);
    }



    private class Column {

        Player[] column;
        int count;


        public Column() {
            column = new Player[rows];
            count = 0;
        }
    }


    /**
     * Add a disk to the board.
     *
     * @param colNo      The index of the column to insert the new
     *                   disk in
     * @param diskColour colour of the inserted disk.
     * @param connLen    number of disks that must be in line to win
     *
     * @return true if this move resultet in a win, otherwise false
     *
     * @throws IllegalMoveException
     */
    public void add(int colNo, Player p)
            throws IllegalMoveException {
        if (colNo<0||colNo>=cols) {
            throw new IllegalMoveException("Column "+colNo+" does not exist!");
        }
        else if (board[colNo].count>=rows)
            throw new IllegalMoveException("Column "+colNo+" is full!");

        Column c = board[colNo];
        c.column[c.count++] = p;
        for (GameStateListener l : listeners) {
            l.newMove(colNo, board[colNo].count, p.getColour());
        }
    }


    /**
     * Get the state of play
     *
     * @param col column to check
     * @param row row to check
     *
     * @return the colour of the disk in (col, row), or null if the
     *         cell is empty
     */
    public Player get(int col, int row) {
        Column c = board[col];
        return c.column[row];
    }
}
