package is207.connectn.gui;

import is207.connectn.game.GameParams;
import is207.connectn.game.GameStateListener;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GridLayout;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Rectangle2D;
import javax.swing.JComponent;
import javax.swing.JPanel;



/**
 * This class displays the game state on the screen. .
 *
 * @author evenal
 */
public class Board extends JPanel implements GameStateListener {

    public static final int CELL_GAP = 0;
    public static final Color EMPTY_COLOUR = Color.DARK_GRAY;
    public static final Color PLAYER1_COLOUR = Color.RED;
    public static final Color PLAYER2_COLOUR = Color.BLUE;

    private int size = 50; // cell size
    private int border = 5; // distance between cells

    private GameParams gameParams;
    private Cell[][] board;


    public Board(GameParams gameParams) {
        this.gameParams = gameParams;
        GridLayout layout = new GridLayout(gameParams.getRows(),
                gameParams.getCols(),
                CELL_GAP,
                CELL_GAP);
        setLayout(layout);

        board = new Cell[gameParams.getRows()][gameParams.getCols()];
        for (int r = 0; r < gameParams.getRows(); r++) {
            for (int c = 0; c < gameParams.getCols(); c++) {
                Cell cell = new Cell();
                board[r][c] = cell;
                add(cell);
            }
        }
        board[0][0].colour = PLAYER1_COLOUR;
        board[1][1].colour = PLAYER2_COLOUR;
        board[2][2].colour = EMPTY_COLOUR;
    }


    public void update(int row, int col, Color colour) {
        board[row][col].colour = colour;
        repaint();
    }


    public void newMove(int col, int row, Color colour) {
        update(row, col, colour);
    }



    private class Cell extends JComponent {

        int row;
        int col;
        Color colour;


        public Cell() {
//            setBackground(Color.);
            colour = EMPTY_COLOUR;
            Dimension dim = new Dimension(size, size);
            setMinimumSize(dim);
            setMaximumSize(dim);
            setPreferredSize(dim);
            setSize(dim);
        }


        public void paintComponent(Graphics g) {
            Graphics2D g2 = (Graphics2D) g;
            super.paintComponent(g);

            g2.setPaint(getBackground());
            g2.fill(new Rectangle2D.Double(0, 0, size, size));

            Ellipse2D disc = new Ellipse2D.Double();
            disc.setFrame(new Rectangle2D.Double(border, border,
                    size - 2 * border - 1, size - 2 * border - 1));
            g2.setPaint(colour);
            g2.fill(disc);

        }

    }
}
