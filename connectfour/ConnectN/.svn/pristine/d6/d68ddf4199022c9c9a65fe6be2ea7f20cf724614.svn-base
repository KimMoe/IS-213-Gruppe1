package is207.connectn.strategy;

import is207.connectn.strategy.Board.StackNode;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;



/**
 * This class is used to keep track of the state of the game
 */
public class Board
{

    //size of the board
    int rows, cols;
    // who occupies which cells
    public int[][] state;
    // height of the stack in each column
    public int[] h;
    // move stack used for backtracking by AI strategies
    LinkedList<StackNode> moveStack;
    // mumber of moves made
    int moveCount;
    // the depth of the lookahead made using trymove
    int lookAhead;

    // a log of sorts
    private static PrintWriter log;

    // create a board
    public Board(int rows, int cols) {
        moveCount = 0;
        this.rows = rows;
        this.cols = cols;
        moveStack = new LinkedList<>();
        h = new int[cols];
        state = new int[rows][cols];
        for (int r = 0; r < rows; r++)
            for (int c = 0; c < cols; c++) {
                state[r][c] = 0;
                h[c] = 0;
            }
//        try {
        log = new PrintWriter(System.out); //new PrintWriter("board.log");
//        }
//        catch (IOException e) {
//        }
    }

    public ArrayList<Integer> getLegalMoves() {
        ArrayList<Integer> moves = new ArrayList<>();
        for (int i = 0; i < cols; i++)
            if (h[i] < rows) moves.add(i);
        return moves;
    }

    public Board clone() {
        Board clone = new Board(rows, cols);
        for (int r = 0; r < rows; r++)
            for (int c = 0; c < cols; c++) {
                clone.state[r][c] = this.state[r][c];
                clone.h[c] = this.h[c];
            }
        return clone;
    }

    @Override
    public int hashCode() {
        int hash = 3;
        hash = 37 * hash + Arrays.deepHashCode(this.state);
        hash = 37 * hash + Arrays.hashCode(this.h);
        return hash;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;
        final Board other = (Board) obj;
        if (!Arrays.deepEquals(this.state, other.state))
            return false;
        if (!Arrays.equals(this.h, other.h)) return false;
        return true;
    }

    public void tryMove(int move, int player) {
//        System.out.println("tryMove(" + move + ", " + player + ")");
        int c = move;
        int r = h[c];
        if (moveStack.size() > 0) {
            StackNode prev = moveStack.getFirst();
//            System.out.println("Previous move by " + prev.player);
            assert player == -prev.player;
        }
        moveStack.addFirst(new StackNode(player, r, c));
        assert r >= 0 && r < rows && c >= 0 && c < cols;
        state[r][c] = player;
        h[c] = r + 1;
        moveCount++;
    }

    public void undoMove() {
        StackNode n = moveStack.removeFirst();
        assert (state[n.row][n.col] == n.player) : "state[" + n.row + "][" + n.col + "] = "
                + state[n.row][n.col] + ", expected " + n.player;
        assert h[n.col] == n.row + 1 : "h[" + n.col + "] = " + h[n.col] + ", expected " + n.row + 1;

        state[n.row][n.col] = 0;
        h[n.col]--;
        moveCount--;
    }

    public void logState(String m, int val) {
        log.println(m + val);
        for (StackNode n : moveStack)
            log.print(" " + n.col);
        log.println();
        log.print("+");
        for (int col = 0; col < cols; col++)
            log.print("-");
        log.println("+");
        for (int row = rows - 1; row >= 0; row--) {
            log.print("|");
            for (int col = 0; col < cols; col++) {
                if (state[row][col] == 1)
                    log.print("O");
                else if (state[row][col] == -1)
                    log.print("X");
                else if (state[row][col] == 0)
                    log.print(".");
                else
                    log.print("?");
            }
            log.println("|");
        }
        log.print("+");
        for (int col = 0; col < cols; col++)
            log.print("-");
        log.println("+");
        log.flush();
    }

    public void printStack() {
//        System.out.println("MoveStack:");
//        for (StackNode sn : moveStack) {
//            System.out.printf("(%2d,%2d) = %3d\n", sn.row, sn.col, sn.player);
//        }
    }



    public class StackNode
    {

        int row, col, player;

        public StackNode(int player, int row, int col) {
            this.player = player;
            this.row = row;
            this.col = col;
        }
    }
}
